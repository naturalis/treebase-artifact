<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
    "http://www.springframework.org/dtd/spring-beans.dtd">

<beans default-autowire="no">

	<!-- ======================== FILTER CHAIN ======================= -->
	<!--	if you wish to use channel security, add "channelProcessingFilter," 
			in front of "httpSessionContextIntegrationFilter" in the list below -->
    <bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
        <property name="filterInvocationDefinitionSource">
            <value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
                PATTERN_TYPE_APACHE_ANT
                /**=httpSessionContextIntegrationFilter,authenticationProcessingFilter,requestMethodsFilter,exceptionTranslationFilter,filterInvocationInterceptor 
            </value>
        </property>
    </bean>

	<!-- ======================== AUTHENTICATION MANAGER AND ITS DEPENDENTS  ======================= -->
	<bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider"/>
			</list>
		</property>
	</bean>
    
    <bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
        <property name="userDetailsService"><ref bean ="userService"/></property>
        <!--  encrypt password instead of storing in clear text in DB -->
        <!--  property name="passwordEncoder" ref="passwordEncoder"/ -->
        <!--  the next 2 lines are for debugging purpose -->
        <!--  property name="userDetailsService" ref="jdbcDaoImpl"/ -->
        <!--  property name="userDetailsService" ref="myUserServices"/ -->
    </bean>
    <!--  bean id="passwordEncoder" class="org.acegisecurity.providers.encoding.ShaPasswordEncoder"/ -->
    
    <!-- bean id="myUserServices" class="org.cipres.treebase.web.controllers.UserDAOImpl"/ -->
    <!--  use JDBC for authentication: only for debugging -->
    <!--  bean id="jdbcDaoImpl" class="org.acegisecurity.userdetails.jdbc.JdbcDaoImpl">
        <property name="dataSource"><ref bean="securityDataSource"/></property>
        <property name="usersByUsernameQuery">
        	<value>SELECT username, password, 'true' as enabled FROM user WHERE username=?</value>
        </property>
        <property name="authoritiesByUsernameQuery">
        	<value>SELECT 'lcchan' as username, 'user' as rolename FROM user WHERE username=? </value>
        </property>
    </bean -->
	<!--  =========================== HTTP REQUEST SECURITY ======================================== -->
	<!-- Filter to propagate the established Authentication object through all requests -->
	<bean id="httpSessionContextIntegrationFilter" class="org.acegisecurity.context.HttpSessionContextIntegrationFilter"/>
	
	<!-- Filter to handle FORM authentication -->	
	<bean id="authenticationProcessingFilter" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationFailureUrl" value="/login.jsp?error=true"/>
        <property name="defaultTargetUrl" value="/user/processUser.html"/>
        <property name="filterProcessesUrl" value="/j_security_check"/>
        <property name="alwaysUseDefaultTargetUrl" value="true"/>
	</bean>
	
	<!--  Filter to link defintions of secured resources with the appropriate access control mechanism -->
	<bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint"  ref="authenticationProcessingFilterEntryPoint"/>
	</bean>
	
	<bean id="requestMethodsFilter" class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter"/>
	
	<!-- ======================== FILTER SECURITY INTERCEPTOR ======================= -->
	<!-- Note the order that entries are placed against the objectDefinitionSource is critical.
        The FilterSecurityInterceptor will work from the top of the list down to the FIRST pattern 
        that matches the request URL. Accordingly, you should place MOST SPECIFIC (ie a/b/c/d.*) 
        expressions first, with LEAST SPECIFIC (ie a/.*) expressions last -->
	<bean id="filterInvocationInterceptor" class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
		<property name="authenticationManager"><ref local ="authenticationManager"/></property>
		<property name="accessDecisionManager"><ref local ="accessDecisionManager"/></property>
		<property name="objectDefinitionSource">
			<value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT 
				/submit.html=User,Admin, Associate Editor
				/user/*=User,Admin, Associate Editor
				/admin/*=Admin, Associate Editor
			</value>
		</property>
	</bean>
	
	<!-- ======================== ACCESSDECISION MANAGER AND ITS DEPENDENTS  ======================= -->
	<bean id="accessDecisionManager" class="org.acegisecurity.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="false"/>
		<property name="decisionVoters">
			<list>
				<ref local ="roleVoter"/>
			</list>
		</property>
	</bean>
    
	<bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter">
		<property name="rolePrefix" value=""/>
	</bean>
	
	<!-- ======================== AUTHENTICATION ENTRY POINT ======================= -->
	<bean id="authenticationProcessingFilterEntryPoint" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
		<property name="loginFormUrl"><value>/login.jsp</value></property>
		<property name="forceHttps"><value>false</value></property>
	</bean>
	
</beans>
